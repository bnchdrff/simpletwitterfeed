<?php
/**
Plugin Name: Simple Twitter Feed
Plugin URI: http://URI_Of_Page_Describing_Plugin_and_Updates
Description: This widget returns a simple twitter feed using standard OAuth now required by Twitter's 1.1 API.
Version: 1.0
Author: Robert Danklefsen
Author URI: http://www.catchylabs.com/drupal/simple-twitter-feed
License: GPL2

Copyright 2013  Robert Danklefsen  (email : bobby@catchylabs.com)

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License, version 2, as
    published by the Free Software Foundation.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

/**
 * Implements hook_block_info().
 */
function simpletwitterfeed_block_info() {
    $blocks['simple_twitter_feed'] = array(
      'info' => t('Simple Twitter Feed'), //The name that will appear in the block list.
      'cache' => DRUPAL_NO_CACHE, //Don't cache block
    );
    return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function simpletwitterfeed_block_configure($delta = '') {
  $form = array();
  switch($delta) {
    case 'simple_twitter_feed':
      //username
      $form['simpletwitterfeed_username'] = array(
        '#type' => 'textfield',
        '#title' => t('Twitter account username'),
        '#size' => 100,
        '#default_value' => variable_get('simpletwitterfeed_username',''),
        '#description' => t('Username for the account you want to pull the feed from.')
      );
      //count
      $form['simpletwitterfeed_count'] = array(
        '#type' => 'textfield',
        '#title' => t('Number of tweets to return'),
        '#size' => 10,
        '#default_value' => variable_get('simpletwitterfeed_count',''),
        '#description' => t('The number of tweets you wish to have displayed. The maximum (I think) is 200.')
      );
      //consumer key
      $form['simpletwitterfeed_consumerkey'] = array(
        '#type' => 'textfield',
        '#title' => t('Consumer Key'),
        '#size' => 100,
        '#default_value' => variable_get('simpletwitterfeed_consumerkey','')
      );
      //consumer secret
      $form['simpletwitterfeed_consumersecret'] = array(
        '#type' => 'textfield',
        '#title' => t('Consumer Secret Key'),
        '#size' => 100,
        '#default_value' => variable_get('simpletwitterfeed_consumersecret','')
      );
      //token key
      $form['simpletwitterfeed_token'] = array(
        '#type' => 'textfield',
        '#title' => t('Token Key'),
        '#size' => 100,
        '#default_value' => variable_get('simpletwitterfeed_token','')
      );
      //token secret key
      $form['simpletwitterfeed_stoken'] = array(
        '#type' => 'textfield',
        '#title' => t('Token Secret Key'),
        '#size' => 100,
        '#default_value' => variable_get('simpletwitterfeed_stoken',''),
        '#description' => t('For this and the three values above it, you will need to go to http://dev.twitter.com/apps (log in with your regular Twitter account credentials) and create an app for the feed on your website. Once you create the app, you will need to create Access Keys. These keys will then need to be copied into these 4 field. For a guide on how to do this, look at http://catchlabs.com/simple-twitter-feed-instructions')
      );
      break;
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function simpletwitterfeed_block_save($delta = '', $edit = array()) {
  switch($delta) {
    case 'simple_twitter_feed':
      //$text = check_plain($edit['simpletwitterfeed_username']);
      variable_set('simpletwitterfeed_username', $edit['simpletwitterfeed_username']);
      variable_set('simpletwitterfeed_count', $edit['simpletwitterfeed_count']);
      variable_set('simpletwitterfeed_token', $edit['simpletwitterfeed_token']);
      variable_set('simpletwitterfeed_stoken', $edit['simpletwitterfeed_stoken']);
      variable_set('simpletwitterfeed_consumerkey', $edit['simpletwitterfeed_consumerkey']);
      variable_set('simpletwitterfeed_consumersecret', $edit['simpletwitterfeed_consumersecret']);
      break;
  }
}

/**
 * Implements hook_block_view().
 */
function simpletwitterfeed_block_view($delta = '') {
  $block = array();
    switch($delta){
    case 'simple_twitter_feed':
    $block['subject'] = NULL;
    $block['content'] = _simpletwitterfeed_get_tweets();
    break;
    }
    return $block;
}

/**
 * Get Twitter feed for block.
 *
 * @return string
 *   Twitter feed, themed
 */
function _simpletwitterfeed_get_tweets() {
  $twitter_data = simpletwitterfeed_getFeed();

  if (empty($twitter_data)) {
    $stf_code = 'There was an error';
  } else {
    $stf_code = '<ul id="twitterFeed">';

    foreach($twitter_data as $tweets){
      $text = _simpletwitterfeed_makeURLs($tweets['text']);
      $time = strtotime($tweets['created_at']);
      $url = 'http://twitter.com/'.$tweets['user']['screen_name'].'/status/'.$tweets['id'];
      $agoTime = _simpletwitterfeed_time_elapsed_string($time);
      $stf_code .= '<li>';
      $stf_code .= '<span class="twitter-text">'. $text . '</span>';
      $stf_code .= '<br />';
      $stf_code .= '<span class="twitter-date"><a href="'.$url.'">'.$agoTime .'</a></span>';
      $stf_code .= '</li>';

    }

    $stf_code .= '</ul>';
  }
  //$stf_code .= variable_get('simpletwitterfeed_username','');
  return $stf_code;
}

//the magic. Returns the feed in a unorder listed.
function simpletwitterfeed_getFeed() {
  //need to create an app in twitter dev and get OAuth codes. Put them here
  $stf_token = variable_get('simpletwitterfeed_token','');
  $stf_token_secret = variable_get('simpletwitterfeed_stoken','');
  $stf_consumer_key = variable_get('simpletwitterfeed_consumerkey','');
  $stf_consumer_secret = variable_get('simpletwitterfeed_consumersecret','');

  $stf_method = 'GET';
  $stf_url = "https://api.twitter.com/1.1/statuses/user_timeline.json";// api call path

  //edit these too.
  $stf_query = array( // query parameters
      'screen_name' => variable_get('simpletwitterfeed_username',''),
      'count' => variable_get('simpletwitterfeed_count','') //0 returns all (limit is 200 i think)
  );

  $stf_oauth = array(
      'oauth_consumer_key' => $stf_consumer_key,
      'oauth_token' => $stf_token,
      'oauth_nonce' => (string)mt_rand(), // a stronger nonce is recommended
      'oauth_timestamp' => time(),
      'oauth_signature_method' => 'HMAC-SHA1',
      'oauth_version' => '1.0'
  );

  $stf_oauth = array_map("rawurlencode", $stf_oauth); // must be encoded before sorting
  $stf_query = array_map("rawurlencode", $stf_query);

  $stf_arr = array_merge($stf_oauth, $stf_query); // combine the values THEN sort

  asort($stf_arr); // secondary sort (value)
  ksort($stf_arr); // primary sort (key)

  // http_build_query automatically encodes, but our parameters
  // are already encoded, and must be by this point, so we undo
  // the encoding step
  $stf_querystring = urldecode(http_build_query($stf_arr, '', '&'));

  // mash everything together for the text to hash
  $stf_base_string = $stf_method."&".rawurlencode($stf_url)."&".rawurlencode($stf_querystring);

  // same with the key
  $stf_key = rawurlencode($stf_consumer_secret)."&".rawurlencode($stf_token_secret);

  // generate the hash
  $stf_signature = rawurlencode(base64_encode(hash_hmac('sha1', $stf_base_string, $stf_key, true)));

  // this time we're using a normal GET query, and we're only encoding the query params
  // (without the oauth params)
  $stf_url .= "?".http_build_query($stf_query);
  $stf_url = str_replace("&amp;","&",$stf_url);

  //echo $url;

  $stf_oauth['oauth_signature'] = $stf_signature; // don't want to abandon all that work!
  ksort($stf_oauth); // probably not necessary, but twitter's demo does it

  // also not necessary, but twitter's demo does this too
  $stf_oauth = array_map("_simpletwitterfeed_add_quotes", $stf_oauth);

  // this is the full value of the Authorization line
  $stf_auth = "OAuth " . urldecode(http_build_query($stf_oauth, '', ', '));

  // if you're doing post, you need to skip the GET building above
  // and instead supply query parameters to CURLOPT_POSTFIELDS
  $stf_options = array( CURLOPT_HTTPHEADER => array("Authorization: $stf_auth"),
                    //CURLOPT_POSTFIELDS => $postfields,
                    CURLOPT_HEADER => false,
                    CURLOPT_URL => $stf_url,
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_SSL_VERIFYPEER => false);

  // do our business
  $stf_feed = curl_init();
  curl_setopt_array($stf_feed, $stf_options);
  $stf_json = curl_exec($stf_feed);
  curl_close($stf_feed);

  return json_decode($stf_json,true);

    //print_r($twitter_data);


}

//part of twitters demo. Whatever...
function _simpletwitterfeed_add_quotes($stf_str) {
  return '"'.$stf_str.'"';
}

//function takes the time from the tweet and computes a "time ago"
function _simpletwitterfeed_time_elapsed_string($stf_ptime) {

    $stf_etime = time() - $stf_ptime;

    if ($stf_etime < 1) {
        return '0 seconds';
    }

    $a = array( 12 * 30 * 24 * 60 * 60  =>  'year',
                30 * 24 * 60 * 60       =>  'month',
                24 * 60 * 60            =>  'day',
                60 * 60                 =>  'hour',
                60                      =>  'minute',
                1                       =>  'second'
                );

    foreach ($a as $secs => $str) {
        $d = $stf_etime / $secs;
        if ($d >= 1) {
            $r = round($d);
            return $r . ' ' . $str . ($r > 1 ? 's' : '') . ' ago';
        }
    }
}

//makes urls out of links, @usernames, and hash tags.
function _simpletwitterfeed_makeURLs($stf_text) {
  // Match URLs
  $stf_text = preg_replace('`\b(([\w-]+://?|www[.])[^\s()<>]+(?:\([\w\d]+\)|([^[:punct:]\s]|/)))`', '<a href="$0">$0</a>', $stf_text);

  // Match @name
  $stf_text = preg_replace('/(@)([a-zA-Z0-9\_]+)/', '@<a href="https://twitter.com/$2">$2</a>', $stf_text);

  // Match #hashtag
  $stf_text = preg_replace('/(#)([a-zA-Z0-9\_]+)/', '<a href="https://twitter.com/search/?q=%23$2">#$2</a>', $stf_text);

  return $stf_text;

}
